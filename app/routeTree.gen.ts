/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UseSuspenseQueryImport } from './routes/useSuspenseQuery'
import { Route as SubsequentQueriesImport } from './routes/subsequent-queries'
import { Route as SimpleSiblingQueriesImport } from './routes/simple-sibling-queries'
import { Route as RecommendedPatternsImport } from './routes/recommended-patterns'
import { Route as ReactQueryImport } from './routes/react-query'
import { Route as LoadersImport } from './routes/loaders'
import { Route as GcTimeImport } from './routes/gcTime'
import { Route as ConsistentViewsImport } from './routes/consistent-views'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const UseSuspenseQueryRoute = UseSuspenseQueryImport.update({
  id: '/useSuspenseQuery',
  path: '/useSuspenseQuery',
  getParentRoute: () => rootRoute,
} as any)

const SubsequentQueriesRoute = SubsequentQueriesImport.update({
  id: '/subsequent-queries',
  path: '/subsequent-queries',
  getParentRoute: () => rootRoute,
} as any)

const SimpleSiblingQueriesRoute = SimpleSiblingQueriesImport.update({
  id: '/simple-sibling-queries',
  path: '/simple-sibling-queries',
  getParentRoute: () => rootRoute,
} as any)

const RecommendedPatternsRoute = RecommendedPatternsImport.update({
  id: '/recommended-patterns',
  path: '/recommended-patterns',
  getParentRoute: () => rootRoute,
} as any)

const ReactQueryRoute = ReactQueryImport.update({
  id: '/react-query',
  path: '/react-query',
  getParentRoute: () => rootRoute,
} as any)

const LoadersRoute = LoadersImport.update({
  id: '/loaders',
  path: '/loaders',
  getParentRoute: () => rootRoute,
} as any)

const GcTimeRoute = GcTimeImport.update({
  id: '/gcTime',
  path: '/gcTime',
  getParentRoute: () => rootRoute,
} as any)

const ConsistentViewsRoute = ConsistentViewsImport.update({
  id: '/consistent-views',
  path: '/consistent-views',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/consistent-views': {
      id: '/consistent-views'
      path: '/consistent-views'
      fullPath: '/consistent-views'
      preLoaderRoute: typeof ConsistentViewsImport
      parentRoute: typeof rootRoute
    }
    '/gcTime': {
      id: '/gcTime'
      path: '/gcTime'
      fullPath: '/gcTime'
      preLoaderRoute: typeof GcTimeImport
      parentRoute: typeof rootRoute
    }
    '/loaders': {
      id: '/loaders'
      path: '/loaders'
      fullPath: '/loaders'
      preLoaderRoute: typeof LoadersImport
      parentRoute: typeof rootRoute
    }
    '/react-query': {
      id: '/react-query'
      path: '/react-query'
      fullPath: '/react-query'
      preLoaderRoute: typeof ReactQueryImport
      parentRoute: typeof rootRoute
    }
    '/recommended-patterns': {
      id: '/recommended-patterns'
      path: '/recommended-patterns'
      fullPath: '/recommended-patterns'
      preLoaderRoute: typeof RecommendedPatternsImport
      parentRoute: typeof rootRoute
    }
    '/simple-sibling-queries': {
      id: '/simple-sibling-queries'
      path: '/simple-sibling-queries'
      fullPath: '/simple-sibling-queries'
      preLoaderRoute: typeof SimpleSiblingQueriesImport
      parentRoute: typeof rootRoute
    }
    '/subsequent-queries': {
      id: '/subsequent-queries'
      path: '/subsequent-queries'
      fullPath: '/subsequent-queries'
      preLoaderRoute: typeof SubsequentQueriesImport
      parentRoute: typeof rootRoute
    }
    '/useSuspenseQuery': {
      id: '/useSuspenseQuery'
      path: '/useSuspenseQuery'
      fullPath: '/useSuspenseQuery'
      preLoaderRoute: typeof UseSuspenseQueryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/consistent-views': typeof ConsistentViewsRoute
  '/gcTime': typeof GcTimeRoute
  '/loaders': typeof LoadersRoute
  '/react-query': typeof ReactQueryRoute
  '/recommended-patterns': typeof RecommendedPatternsRoute
  '/simple-sibling-queries': typeof SimpleSiblingQueriesRoute
  '/subsequent-queries': typeof SubsequentQueriesRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/consistent-views': typeof ConsistentViewsRoute
  '/gcTime': typeof GcTimeRoute
  '/loaders': typeof LoadersRoute
  '/react-query': typeof ReactQueryRoute
  '/recommended-patterns': typeof RecommendedPatternsRoute
  '/simple-sibling-queries': typeof SimpleSiblingQueriesRoute
  '/subsequent-queries': typeof SubsequentQueriesRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/consistent-views': typeof ConsistentViewsRoute
  '/gcTime': typeof GcTimeRoute
  '/loaders': typeof LoadersRoute
  '/react-query': typeof ReactQueryRoute
  '/recommended-patterns': typeof RecommendedPatternsRoute
  '/simple-sibling-queries': typeof SimpleSiblingQueriesRoute
  '/subsequent-queries': typeof SubsequentQueriesRoute
  '/useSuspenseQuery': typeof UseSuspenseQueryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/consistent-views'
    | '/gcTime'
    | '/loaders'
    | '/react-query'
    | '/recommended-patterns'
    | '/simple-sibling-queries'
    | '/subsequent-queries'
    | '/useSuspenseQuery'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/consistent-views'
    | '/gcTime'
    | '/loaders'
    | '/react-query'
    | '/recommended-patterns'
    | '/simple-sibling-queries'
    | '/subsequent-queries'
    | '/useSuspenseQuery'
  id:
    | '__root__'
    | '/'
    | '/consistent-views'
    | '/gcTime'
    | '/loaders'
    | '/react-query'
    | '/recommended-patterns'
    | '/simple-sibling-queries'
    | '/subsequent-queries'
    | '/useSuspenseQuery'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConsistentViewsRoute: typeof ConsistentViewsRoute
  GcTimeRoute: typeof GcTimeRoute
  LoadersRoute: typeof LoadersRoute
  ReactQueryRoute: typeof ReactQueryRoute
  RecommendedPatternsRoute: typeof RecommendedPatternsRoute
  SimpleSiblingQueriesRoute: typeof SimpleSiblingQueriesRoute
  SubsequentQueriesRoute: typeof SubsequentQueriesRoute
  UseSuspenseQueryRoute: typeof UseSuspenseQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConsistentViewsRoute: ConsistentViewsRoute,
  GcTimeRoute: GcTimeRoute,
  LoadersRoute: LoadersRoute,
  ReactQueryRoute: ReactQueryRoute,
  RecommendedPatternsRoute: RecommendedPatternsRoute,
  SimpleSiblingQueriesRoute: SimpleSiblingQueriesRoute,
  SubsequentQueriesRoute: SubsequentQueriesRoute,
  UseSuspenseQueryRoute: UseSuspenseQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/consistent-views",
        "/gcTime",
        "/loaders",
        "/react-query",
        "/recommended-patterns",
        "/simple-sibling-queries",
        "/subsequent-queries",
        "/useSuspenseQuery"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/consistent-views": {
      "filePath": "consistent-views.tsx"
    },
    "/gcTime": {
      "filePath": "gcTime.tsx"
    },
    "/loaders": {
      "filePath": "loaders.tsx"
    },
    "/react-query": {
      "filePath": "react-query.tsx"
    },
    "/recommended-patterns": {
      "filePath": "recommended-patterns.tsx"
    },
    "/simple-sibling-queries": {
      "filePath": "simple-sibling-queries.tsx"
    },
    "/subsequent-queries": {
      "filePath": "subsequent-queries.tsx"
    },
    "/useSuspenseQuery": {
      "filePath": "useSuspenseQuery.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
